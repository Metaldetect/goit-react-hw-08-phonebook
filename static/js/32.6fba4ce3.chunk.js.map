{"version":3,"file":"static/js/32.6fba4ce3.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsAsyncActions';\nimport { selectContacts } from 'redux/selectors';\nimport { Button, Container, TextField, Typography } from '@mui/material';\n\nconst phonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Name is required'),\n  phone: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nfunction ContactForm() {\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const successMessage = 'Contact added successfully!';\n  const errorMessage = 'An error occurred while adding the contact.';\n\n  const isContactDuplicate = (name, number) => {\n    if (!contacts || !Array.isArray(contacts)) {\n      return false;\n    }\n    return contacts.some(\n      contact => contact.name === name || contact.number === number\n    );\n  };\n\n  const handleSubmit = async (values, actions) => {\n    const { name, phone } = values;\n    const isDuplicateContact = isContactDuplicate(name, phone);\n\n    if (isDuplicateContact) {\n      Notiflix.Notify.failure(\n        'Contact with the same name or phone number already exists!'\n      );\n      return;\n    }\n\n    try {\n      const response = await dispatch(addContact({ name, number: phone }));\n\n      if (addContact.fulfilled.match(response)) {\n        actions.resetForm();\n        Notiflix.Notify.success(successMessage);\n      } else {\n        Notiflix.Notify.failure(errorMessage);\n      }\n    } catch (error) {\n      Notiflix.Notify.failure(errorMessage);\n    }\n  };\n  return (\n    <Container maxWidth=\"xs\">\n      <Typography variant=\"h5\" align=\"center\" gutterBottom>\n        Phonebook\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={phonebookSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Field\n            as={TextField}\n            fullWidth\n            id=\"name\"\n            name=\"name\"\n            label=\"Name\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            helperText={<ErrorMessage name=\"name\" />}\n          />\n          <Field\n            as={TextField}\n            fullWidth\n            id=\"phone\"\n            name=\"phone\"\n            label=\"Phone\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            helperText={<ErrorMessage name=\"phone\" />}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            size=\"large\"\n            sx={{ mt: 2 }}\n          >\n            Add Contact\n          </Button>\n        </Form>\n      </Formik>\n    </Container>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport {\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n} from '@mui/material';\nimport { RiContactsLine } from 'react-icons/ri';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { deleteContact } from 'redux/contactsAsyncActions';\n\nfunction ContactItem({ id, name, phone }) {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = async () => {\n    try {\n      await dispatch(deleteContact(id));\n      Notiflix.Notify.success('Contact deleted successfully!');\n    } catch (error) {\n      Notiflix.Notify.failure('An error occurred while deleting the contact.');\n    }\n  };\n\n  return (\n    <ListItem>\n      <RiContactsLine fontSize=\"large\" />\n      <ListItemText primary={name} secondary={phone} />\n      <ListItemSecondaryAction>\n        <IconButton\n          edge=\"end\"\n          aria-label=\"delete\"\n          onClick={handleDeleteContact}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectContactsFilter } from 'redux/selectors';\nimport Notiflix from 'notiflix';\nimport { Paper, Typography, Grid } from '@mui/material';\nimport ContactItem from 'components/ContactListItem';\n\nfunction ContactList() {\n  const filter = useSelector(selectContactsFilter);\n  const contacts = useSelector(selectContacts);\n\n  if (!contacts || !Array.isArray(contacts) || contacts.length === 0) {\n    return null;\n  }\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  if (!filteredContacts?.length) {\n    Notiflix.Notify.info('No contacts found.');\n  }\n\n  return (\n    <Paper elevation={3} sx={{ p: 2 }}>\n      <Grid container spacing={2} justifyContent=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" align=\"center\">\n            Phonebook\n          </Typography>\n        </Grid>\n        {filteredContacts.map(({ id, name, number }) => (\n          <Grid item xs={12} key={id}>\n            <ContactItem id={id} name={name} phone={number} />\n          </Grid>\n        ))}\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  // margin-top: 1rem;\n  margin-bottom: 2rem;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-top: 0.625rem;\n  font-weight: bold;\n  font-size: 2vw;\n  display: block;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 0.5rem;\n  width: 20%;\n  font-size: 1rem;\n  border: 0.0625rem solid #ccc;\n  border-radius: 0.25rem;\n  margin-top: 0.3125rem;\n\n  &:focus {\n    box-shadow: 0 0 1rem #007bff;\n    outline: none;\n  }\n`;\n","import React from 'react';\nimport { FilterWrapper, FilterLabel, FilterInput } from './FilterStyles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nfunction FilterComponent() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  };\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"filter\">Filter contacts:</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        placeholder=\"Enter a name\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterWrapper>\n  );\n}\n\nexport default FilterComponent;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <ContactList />\n        <Filter />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectContactsFilter","filters","phonebookSchema","Yup","shape","name","trim","matches","required","phone","dispatch","useDispatch","useSelector","errorMessage","isContactDuplicate","number","Array","isArray","some","contact","handleSubmit","values","actions","Notiflix","addContact","response","resetForm","Container","maxWidth","Typography","variant","align","gutterBottom","initialValues","validationSchema","onSubmit","as","TextField","fullWidth","id","label","margin","helperText","Button","type","color","size","sx","mt","handleDeleteContact","deleteContact","ListItem","fontSize","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","edge","onClick","Delete","filter","length","filteredContacts","toLowerCase","includes","Paper","elevation","p","Grid","container","spacing","justifyContent","item","xs","map","FilterWrapper","styled","FilterLabel","FilterInput","htmlFor","placeholder","value","onChange","e","setFilter","target","Filter"],"sourceRoot":""}