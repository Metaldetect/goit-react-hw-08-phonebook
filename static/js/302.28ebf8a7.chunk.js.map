{"version":3,"file":"static/js/302.28ebf8a7.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormStyles.jsx","redux/contactsAsyncActions.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyles.jsx","components/ContactListItem/ContactListItemStyles.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage } from 'formik';\n\nexport const ContactFormWrapper = styled.div`\n  width: 30%;\n  margin: 0 auto;\n`;\nexport const ContactTitle = styled.h1`\n  font-size: 3vw;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  display: flex;\n  align-item: center;\n  justify-content: center;\n`;\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n\nexport const ErrorText = styled(ErrorMessage)`\n  color: red;\n  margin-top: 0.3125rem;\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  height: 2.5rem;\n  padding: 0.3125rem 0.46875rem;\n  margin-top: 0.625rem;\n  margin-bottom: 0.5rem;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 0.15625rem;\n  font-size: 1rem;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const FormWrapper = styled.div`\n  max-width: 18.75rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.625rem;\n  label {\n    margin-bottom: 0.3125rem;\n    font-size: 1rem;\n  }\n  input {\n    padding: 0.5rem;\n    border: 0.0625rem solid #ccc;\n    border-radius: 0.25rem;\n    font-size: 1rem;\n    margin-bottom: 0.5rem;\n\n    &:focus {\n      box-shadow: 0 0 1rem #007bff;\n      outline: none;\n    }\n  }\n  .error {\n    color: red;\n    font-size: 0.875rem;\n    margin-top: 0.3125rem;\n  }\n`;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get('/contacts');\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async ({ name, number }, thunkAPI) => {\n    try {\n      const response = await axios.post('/contacts', { name, number });\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, thunkAPI) => {\n    try {\n      const response = await axios.delete(`/contacts/${contactId}`);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","export const selectContacts = state => state.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters.filter;\n","// import PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  ContactFormWrapper,\n  ContactTitle,\n  Button,\n  FormWrapper,\n  FormGroup,\n  Label,\n  ErrorText,\n} from './ContactFormStyles';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsAsyncActions';\nimport { selectContacts } from 'redux/selectors';\n\nconst phonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Name is required'),\n  phone: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nfunction ContactForm() {\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const isContactDuplicate = (name, phone) => {\n    if (!contacts || !Array.isArray(contacts)) {\n      return false;\n    }\n    return contacts.some(\n      contact => contact.name === name || contact.phone === phone\n    );\n  };\n\n  const handleSubmit = async (values, actions) => {\n    const { name, phone } = values;\n    const isDuplicateContact = isContactDuplicate(name, phone);\n\n    const successMessage = 'Contact added successfully!';\n    const errorMessage = 'An error occurred while adding the contact.';\n\n    if (isDuplicateContact) {\n      Notiflix.Notify.failure(\n        'Contact with the same name or phone number already exists!'\n      );\n      return;\n    }\n\n    try {\n      const response = await dispatch(addContact({ name, number: phone }));\n\n      if (addContact.fulfilled.match(response)) {\n        actions.resetForm();\n        Notiflix.Notify.success(successMessage);\n      } else {\n        Notiflix.Notify.failure(errorMessage);\n      }\n    } catch (error) {\n      Notiflix.Notify.failure(errorMessage);\n    }\n  };\n\n  return (\n    <ContactFormWrapper>\n      <ContactTitle>Phonebook</ContactTitle>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={phonebookSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form as={FormWrapper}>\n          <FormGroup>\n            <Label htmlFor=\"name\">Name</Label>\n            <Field type=\"text\" id=\"name\" name=\"name\" />\n            <ErrorText name=\"name\" component=\"div\" className=\"error\" />\n          </FormGroup>\n\n          <FormGroup>\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Field type=\"text\" id=\"phone\" name=\"phone\" />\n            <ErrorText name=\"phone\" component=\"div\" className=\"error\" />\n          </FormGroup>\n\n          <Button type=\"submit\">Add Contact</Button>\n        </Form>\n      </Formik>\n    </ContactFormWrapper>\n  );\n}\n\n// ContactForm.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       phone: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n// };\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactListWrapper = styled.ul`\n  width: 30%;\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n`;\n","import styled from '@emotion/styled';\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 0.25rem;\n  margin-bottom: 1rem;\n`;\n\nexport const ContactIcon = styled.div`\n  font-size: 1.5rem;\n  margin-right: 1rem;\n`;\n\nexport const ContactDetails = styled.div`\n  flex: 1;\n`;\n\nexport const ContactName = styled.h3`\n  margin: 0;\n  font-size: 1.5vw;\n`;\n\nexport const ContactPhone = styled.p`\n  margin: 0;\n  font-size: 1vw;\n  color: #666;\n`;\n\nexport const DeleteButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 0.25rem;\n  font-size: 0.875rem;\n  margin-left: 0.625rem;\n`;\n","import React from 'react';\nimport {\n  ContactListItem,\n  ContactIcon,\n  ContactDetails,\n  ContactName,\n  ContactPhone,\n  DeleteButton,\n} from './ContactListItemStyles';\nimport { RiContactsLine } from 'react-icons/ri';\nimport { AiFillDelete } from 'react-icons/ai';\n\nimport { deleteContact } from 'redux/contactsAsyncActions';\nimport Notiflix from 'notiflix';\n\nfunction ContactItem({ id, name, phone }) {\n  const [deleteContactFromFilter] = deleteContact();\n\n  const handleDeleteContact = async () => {\n    try {\n      await deleteContactFromFilter(id);\n      Notiflix.Notify.success('Contact deleted successfully!');\n    } catch (error) {\n      Notiflix.Notify.failure('An error occurred while deleting the contact.');\n    }\n  };\n\n  return (\n    <ContactListItem key={id}>\n      <ContactIcon>\n        <RiContactsLine />\n      </ContactIcon>\n      <ContactDetails>\n        <ContactName>{name}</ContactName>\n        <ContactPhone>{phone}</ContactPhone>\n      </ContactDetails>\n      <DeleteButton onClick={() => handleDeleteContact(id)}>\n        <AiFillDelete />\n      </DeleteButton>\n    </ContactListItem>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\nimport { ContactListWrapper } from './ContactListStyles';\nimport { useSelector } from 'react-redux';\nimport { selectContactsFilter } from 'redux/selectors';\nimport ContactItem from 'components/ContactListItem';\nimport Notiflix from 'notiflix';\n\nimport { fetchContacts } from 'redux/contactsAsyncActions';\n\nfunction ContactList() {\n  const { data: contacts } = fetchContacts();\n  const filter = useSelector(selectContactsFilter);\n\n  if (!contacts) {\n    return null;\n  }\n  const filteredContacts = contacts.filter(\n    contact =>\n      typeof filter === 'string' &&\n      typeof contact.name === 'string' &&\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  if (!filteredContacts?.length) {\n    Notiflix.Notify.info('No contacts found.');\n  }\n\n  return (\n    <ContactListWrapper>\n      {filteredContacts.map(({ id, name, phone }) => (\n        <ContactItem key={id} id={id} name={name} phone={phone} />\n      ))}\n    </ContactListWrapper>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  // margin-top: 1rem;\n  margin-bottom: 2rem;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-top: 0.625rem;\n  font-weight: bold;\n  font-size: 2vw;\n  display: block;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 0.5rem;\n  width: 20%;\n  font-size: 1rem;\n  border: 0.0625rem solid #ccc;\n  border-radius: 0.25rem;\n  margin-top: 0.3125rem;\n\n  &:focus {\n    box-shadow: 0 0 1rem #007bff;\n    outline: none;\n  }\n`;\n","import React from 'react';\nimport { FilterWrapper, FilterLabel, FilterInput } from './FilterStyles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nfunction FilterComponent() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  };\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"filter\">Filter contacts:</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        placeholder=\"Enter a name\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterWrapper>\n  );\n}\n\nexport default FilterComponent;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["ContactFormWrapper","styled","ContactTitle","Label","ErrorText","ErrorMessage","Button","FormWrapper","FormGroup","axios","fetchContacts","createAsyncThunk","_","thunkAPI","response","data","rejectWithValue","message","addContact","name","number","deleteContact","contactId","selectContacts","state","contacts","selectContactsFilter","filters","filter","phonebookSchema","Yup","shape","trim","matches","required","phone","dispatch","useDispatch","useSelector","isContactDuplicate","Array","isArray","some","contact","handleSubmit","values","actions","isDuplicateContact","successMessage","errorMessage","Notiflix","fulfilled","match","resetForm","initialValues","validationSchema","onSubmit","as","htmlFor","type","id","component","className","ContactListWrapper","ContactListItem","ContactIcon","ContactDetails","ContactName","ContactPhone","DeleteButton","deleteContactFromFilter","handleDeleteContact","onClick","filteredContacts","toLowerCase","includes","length","map","FilterWrapper","FilterLabel","FilterInput","placeholder","value","onChange","e","setFilter","target","Filter"],"sourceRoot":""}