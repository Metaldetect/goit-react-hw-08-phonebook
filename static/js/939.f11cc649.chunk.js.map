{"version":3,"file":"static/js/939.f11cc649.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormStyles.jsx","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyles.jsx","components/ContactListItem/ContactListItemStyles.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage } from 'formik';\n\nexport const ContactFormWrapper = styled.div`\n  width: 30%;\n  margin: 0 auto;\n`;\nexport const ContactTitle = styled.h1`\n  font-size: 3vw;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  display: flex;\n  align-item: center;\n  justify-content: center;\n`;\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n\nexport const ErrorText = styled(ErrorMessage)`\n  color: red;\n  margin-top: 0.3125rem;\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  height: 2.5rem;\n  padding: 0.3125rem 0.46875rem;\n  margin-top: 0.625rem;\n  margin-bottom: 0.5rem;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 0.15625rem;\n  font-size: 1rem;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const FormWrapper = styled.div`\n  max-width: 18.75rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.625rem;\n  label {\n    margin-bottom: 0.3125rem;\n    font-size: 1rem;\n  }\n  input {\n    padding: 0.5rem;\n    border: 0.0625rem solid #ccc;\n    border-radius: 0.25rem;\n    font-size: 1rem;\n    margin-bottom: 0.5rem;\n\n    &:focus {\n      box-shadow: 0 0 1rem #007bff;\n      outline: none;\n    }\n  }\n  .error {\n    color: red;\n    font-size: 0.875rem;\n    margin-top: 0.3125rem;\n  }\n`;\n","export const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;\n","// import PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  ContactFormWrapper,\n  ContactTitle,\n  Button,\n  FormWrapper,\n  FormGroup,\n  Label,\n  ErrorText,\n} from './ContactFormStyles';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsAsyncActions';\nimport { selectContacts } from 'redux/selectors';\n\nconst phonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Name is required'),\n  phone: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nfunction ContactForm() {\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const successMessage = 'Contact added successfully!';\n  const errorMessage = 'An error occurred while adding the contact.';\n\n  const isContactDuplicate = (name, phone) => {\n    if (!contacts || !Array.isArray(contacts)) {\n      return false;\n    }\n    return contacts.some(\n      contact => contact.name === name || contact.phone === phone\n    );\n  };\n\n  const handleSubmit = async (values, actions) => {\n    const { name, phone } = values;\n    const isDuplicateContact = isContactDuplicate(name, phone);\n\n    if (isDuplicateContact) {\n      Notiflix.Notify.failure(\n        'Contact with the same name or phone number already exists!'\n      );\n      return;\n    }\n\n    try {\n      const response = await dispatch(addContact({ name, number: phone }));\n\n      if (addContact.fulfilled.match(response)) {\n        actions.resetForm();\n        Notiflix.Notify.success(successMessage);\n      } else {\n        Notiflix.Notify.failure(errorMessage);\n      }\n    } catch (error) {\n      Notiflix.Notify.failure(errorMessage);\n    }\n  };\n  return (\n    <ContactFormWrapper>\n      <ContactTitle>Phonebook</ContactTitle>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={phonebookSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form as={FormWrapper}>\n          <FormGroup>\n            <Label htmlFor=\"name\">Name</Label>\n            <Field type=\"text\" id=\"name\" name=\"name\" />\n            <ErrorText name=\"name\" component=\"div\" className=\"error\" />\n          </FormGroup>\n\n          <FormGroup>\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Field type=\"text\" id=\"phone\" name=\"phone\" />\n            <ErrorText name=\"phone\" component=\"div\" className=\"error\" />\n          </FormGroup>\n\n          <Button type=\"submit\">Add Contact</Button>\n        </Form>\n      </Formik>\n    </ContactFormWrapper>\n  );\n}\n\n// ContactForm.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       phone: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n// };\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactListWrapper = styled.ul`\n  width: 30%;\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n`;\n","import styled from '@emotion/styled';\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 0.25rem;\n  margin-bottom: 1rem;\n`;\n\nexport const ContactIcon = styled.div`\n  font-size: 1.5rem;\n  margin-right: 1rem;\n`;\n\nexport const ContactDetails = styled.div`\n  flex: 1;\n`;\n\nexport const ContactName = styled.h3`\n  margin: 0;\n  font-size: 1.5vw;\n`;\n\nexport const ContactPhone = styled.p`\n  margin: 0;\n  font-size: 1vw;\n  color: #666;\n`;\n\nexport const DeleteButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 0.25rem;\n  font-size: 0.875rem;\n  margin-left: 0.625rem;\n`;\n","import React from 'react';\nimport {\n  ContactListItem,\n  ContactIcon,\n  ContactDetails,\n  ContactName,\n  ContactPhone,\n  DeleteButton,\n} from './ContactListItemStyles';\nimport { RiContactsLine } from 'react-icons/ri';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { deleteContact } from 'redux/contactsAsyncActions';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\n\nfunction ContactItem({ id, name, phone }) {\n  const deleteContactFromFilter = useDispatch(deleteContact);\n\n  const handleDeleteContact = async () => {\n    try {\n      await deleteContactFromFilter(id);\n      Notiflix.Notify.success('Contact deleted successfully!');\n    } catch (error) {\n      Notiflix.Notify.failure('An error occurred while deleting the contact.');\n    }\n  };\n\n  return (\n    <ContactListItem key={id}>\n      <ContactIcon>\n        <RiContactsLine />\n      </ContactIcon>\n      <ContactDetails>\n        <ContactName>{name}</ContactName>\n        <ContactPhone>{phone}</ContactPhone>\n      </ContactDetails>\n      <DeleteButton onClick={() => handleDeleteContact(id)}>\n        <AiFillDelete />\n      </DeleteButton>\n    </ContactListItem>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\nimport { ContactListWrapper } from './ContactListStyles';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectContactsFilter } from 'redux/selectors';\nimport ContactItem from 'components/ContactListItem';\nimport Notiflix from 'notiflix';\n\nfunction ContactList() {\n  const filter = useSelector(selectContactsFilter);\n  const contacts = useSelector(selectContacts);\n\n  if (!contacts || !Array.isArray(contacts) || contacts.length === 0) {\n    return null;\n  }\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  if (!filteredContacts?.length) {\n    Notiflix.Notify.info('No contacts found.');\n  }\n\n  return (\n    <ContactListWrapper>\n      {filteredContacts.map(({ id, name, phone }) => (\n        <ContactItem key={id} id={id} name={name} phone={phone} />\n      ))}\n    </ContactListWrapper>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  // margin-top: 1rem;\n  margin-bottom: 2rem;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-top: 0.625rem;\n  font-weight: bold;\n  font-size: 2vw;\n  display: block;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 0.5rem;\n  width: 20%;\n  font-size: 1rem;\n  border: 0.0625rem solid #ccc;\n  border-radius: 0.25rem;\n  margin-top: 0.3125rem;\n\n  &:focus {\n    box-shadow: 0 0 1rem #007bff;\n    outline: none;\n  }\n`;\n","import React from 'react';\nimport { FilterWrapper, FilterLabel, FilterInput } from './FilterStyles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nfunction FilterComponent() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  };\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"filter\">Filter contacts:</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        placeholder=\"Enter a name\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterWrapper>\n  );\n}\n\nexport default FilterComponent;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <ContactList />\n        <Filter />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["ContactFormWrapper","styled","ContactTitle","Label","ErrorText","ErrorMessage","Button","FormWrapper","FormGroup","selectContacts","state","contacts","items","selectContactsFilter","filters","phonebookSchema","Yup","shape","name","trim","matches","required","phone","dispatch","useDispatch","useSelector","errorMessage","isContactDuplicate","Array","isArray","some","contact","handleSubmit","values","actions","Notiflix","addContact","number","response","resetForm","initialValues","validationSchema","onSubmit","as","htmlFor","type","id","component","className","ContactListWrapper","ContactListItem","ContactIcon","ContactDetails","ContactName","ContactPhone","DeleteButton","deleteContactFromFilter","deleteContact","handleDeleteContact","onClick","filter","length","filteredContacts","toLowerCase","includes","map","FilterWrapper","FilterLabel","FilterInput","placeholder","value","onChange","e","setFilter","target","Filter"],"sourceRoot":""}