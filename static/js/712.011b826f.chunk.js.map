{"version":3,"file":"static/js/712.011b826f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormStyles.jsx","redux/contactsApi.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyles.jsx","redux/selectors.js","components/ContactListItem/ContactListItemStyles.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.jsx","redux/filterSlice.js","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage } from 'formik';\n\nexport const ContactFormWrapper = styled.div`\n  width: 30%;\n  margin: 0 auto;\n`;\nexport const ContactTitle = styled.h1`\n  font-size: 3vw;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  display: flex;\n  align-item: center;\n  justify-content: center;\n`;\nexport const Label = styled.label`\n  font-weight: bold;\n`;\n\nexport const ErrorText = styled(ErrorMessage)`\n  color: red;\n  margin-top: 0.3125rem;\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  height: 2.5rem;\n  padding: 0.3125rem 0.46875rem;\n  margin-top: 0.625rem;\n  margin-bottom: 0.5rem;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 0.15625rem;\n  font-size: 1rem;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const FormWrapper = styled.div`\n  max-width: 18.75rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.625rem;\n  label {\n    margin-bottom: 0.3125rem;\n    font-size: 1rem;\n  }\n  input {\n    padding: 0.5rem;\n    border: 0.0625rem solid #ccc;\n    border-radius: 0.25rem;\n    font-size: 1rem;\n    margin-bottom: 0.5rem;\n\n    &:focus {\n      box-shadow: 0 0 1rem #007bff;\n      outline: none;\n    }\n  }\n  .error {\n    color: red;\n    font-size: 0.875rem;\n    margin-top: 0.3125rem;\n  }\n`;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://64fb1ae6cb9c00518f7aa678.mockapi.io/api/v1',\n  }),\n\n  endpoints: builder => ({\n    getContacts: builder.query({\n      query: () => `/contacts`,\n      providesTags: ['contacts'],\n    }),\n    getFilter: builder.query({\n      query: (name = '') => `/contacts${name ? `?name=${name}` : ''}`,\n      providesTags: ['contacts'],\n    }),\n\n    addContactToFilter: builder.mutation({\n      query: body => ({\n        url: '/contacts',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['contacts'],\n    }),\n    deleteContactFromFilter: builder.mutation({\n      query: id => ({\n        url: `/contacts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['contacts'],\n    }),\n  }),\n});\n\nexport const {\n  useGetContactsQuery,\n  useGetFilterQuery,\n  useAddContactToFilterMutation,\n  useDeleteContactFromFilterMutation,\n} = contactsApi;\n","// import PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  ContactFormWrapper,\n  ContactTitle,\n  Button,\n  FormWrapper,\n  FormGroup,\n  Label,\n  ErrorText,\n} from './ContactFormStyles';\nimport Notiflix from 'notiflix';\nimport {\n  useAddContactToFilterMutation,\n  useGetContactsQuery,\n} from 'redux/contactsApi';\n\nconst phonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Name is required'),\n  phone: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nfunction ContactForm() {\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const { data: contacts } = useGetContactsQuery();\n  const [addContactToFilter] = useAddContactToFilterMutation();\n\n  const isContactDuplicate = (name, phone) => {\n    if (!contacts || !Array.isArray(contacts)) {\n      return false;\n    }\n    return contacts.some(\n      contact => contact.name === name || contact.phone === phone\n    );\n  };\n\n  const handleSubmit = async (values, actions) => {\n    const { name, phone } = values;\n    const isDuplicateContact = isContactDuplicate(name, phone);\n\n    const successMessage = 'Contact added successfully!';\n    const errorMessage = 'An error occurred while adding the contact.';\n\n    if (isDuplicateContact) {\n      Notiflix.Notify.failure(\n        'Contact with the same name or phone number already exists!'\n      );\n      return;\n    }\n\n    try {\n      const response = await addContactToFilter({ name, phone });\n\n      if (response.error) {\n        Notiflix.Notify.failure(errorMessage);\n        return;\n      }\n\n      actions.resetForm();\n      Notiflix.Notify.success(successMessage);\n    } catch (error) {\n      Notiflix.Notify.failure(errorMessage);\n    }\n  };\n\n  return (\n    <ContactFormWrapper>\n      <ContactTitle>Phonebook</ContactTitle>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={phonebookSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form as={FormWrapper}>\n          <FormGroup>\n            <Label htmlFor=\"name\">Name</Label>\n            <Field type=\"text\" id=\"name\" name=\"name\" />\n            <ErrorText name=\"name\" component=\"div\" className=\"error\" />\n          </FormGroup>\n\n          <FormGroup>\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Field type=\"text\" id=\"phone\" name=\"phone\" />\n            <ErrorText name=\"phone\" component=\"div\" className=\"error\" />\n          </FormGroup>\n\n          <Button type=\"submit\">Add Contact</Button>\n        </Form>\n      </Formik>\n    </ContactFormWrapper>\n  );\n}\n\n// ContactForm.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       phone: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n// };\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactListWrapper = styled.ul`\n  width: 30%;\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n`;\n","export const getFilter = state => state.filter;\n","import styled from '@emotion/styled';\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 0.25rem;\n  margin-bottom: 1rem;\n`;\n\nexport const ContactIcon = styled.div`\n  font-size: 1.5rem;\n  margin-right: 1rem;\n`;\n\nexport const ContactDetails = styled.div`\n  flex: 1;\n`;\n\nexport const ContactName = styled.h3`\n  margin: 0;\n  font-size: 1.5vw;\n`;\n\nexport const ContactPhone = styled.p`\n  margin: 0;\n  font-size: 1vw;\n  color: #666;\n`;\n\nexport const DeleteButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 0.25rem;\n  font-size: 0.875rem;\n  margin-left: 0.625rem;\n`;\n","import React from 'react';\nimport {\n  ContactListItem,\n  ContactIcon,\n  ContactDetails,\n  ContactName,\n  ContactPhone,\n  DeleteButton,\n} from './ContactListItemStyles';\nimport { RiContactsLine } from 'react-icons/ri';\nimport { AiFillDelete } from 'react-icons/ai';\n\nimport { useDeleteContactFromFilterMutation } from 'redux/contactsApi';\nimport Notiflix from 'notiflix';\n\nfunction ContactItem({ id, name, phone }) {\n  const [deleteContactFromFilter] = useDeleteContactFromFilterMutation();\n\n  const handleDeleteContact = async () => {\n    try {\n      await deleteContactFromFilter(id);\n      Notiflix.Notify.success('Contact deleted successfully!');\n    } catch (error) {\n      Notiflix.Notify.failure('An error occurred while deleting the contact.');\n    }\n  };\n\n  return (\n    <ContactListItem key={id}>\n      <ContactIcon>\n        <RiContactsLine />\n      </ContactIcon>\n      <ContactDetails>\n        <ContactName>{name}</ContactName>\n        <ContactPhone>{phone}</ContactPhone>\n      </ContactDetails>\n      <DeleteButton onClick={() => handleDeleteContact(id)}>\n        <AiFillDelete />\n      </DeleteButton>\n    </ContactListItem>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\nimport { ContactListWrapper } from './ContactListStyles';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport ContactItem from 'components/ContactListItem';\nimport Notiflix from 'notiflix';\n\nimport { useGetContactsQuery } from 'redux/contactsApi';\n\nfunction ContactList() {\n  const { data: contacts } = useGetContactsQuery();\n  const filter = useSelector(getFilter);\n\n  if (!contacts) {\n    return null;\n  }\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  if (!filteredContacts?.length) {\n    Notiflix.Notify.info('No contacts found.');\n  }\n\n  return (\n    <ContactListWrapper>\n      {filteredContacts.map(({ id, name, phone }) => (\n        <ContactItem key={id} id={id} name={name} phone={phone} />\n      ))}\n    </ContactListWrapper>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  // margin-top: 1rem;\n  margin-bottom: 2rem;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-top: 0.625rem;\n  font-weight: bold;\n  font-size: 2vw;\n  display: block;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 0.5rem;\n  width: 20%;\n  font-size: 1rem;\n  border: 0.0625rem solid #ccc;\n  border-radius: 0.25rem;\n  margin-top: 0.3125rem;\n\n  &:focus {\n    box-shadow: 0 0 1rem #007bff;\n    outline: none;\n  }\n`;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    setFilter: (_, action) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setFilter } = filterSlice.actions;\n\nexport const filtersReducer = filterSlice.reducer;\n","import React from 'react';\nimport { FilterWrapper, FilterLabel, FilterInput } from './FilterStyles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nfunction FilterComponent() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  };\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"filter\">Filter contacts:</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        placeholder=\"Enter a name\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterWrapper>\n  );\n}\n\nexport default FilterComponent;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["ContactFormWrapper","styled","ContactTitle","Label","ErrorText","ErrorMessage","Button","FormWrapper","FormGroup","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getContacts","query","providesTags","getFilter","name","addContactToFilter","mutation","body","url","method","invalidatesTags","deleteContactFromFilter","id","useGetContactsQuery","useAddContactToFilterMutation","useGetFilterQuery","useDeleteContactFromFilterMutation","phonebookSchema","Yup","shape","trim","matches","required","phone","contacts","data","isContactDuplicate","Array","isArray","some","contact","handleSubmit","values","actions","isDuplicateContact","successMessage","errorMessage","Notiflix","error","resetForm","initialValues","validationSchema","onSubmit","as","htmlFor","type","component","className","ContactListWrapper","state","filter","ContactListItem","ContactIcon","ContactDetails","ContactName","ContactPhone","DeleteButton","handleDeleteContact","onClick","useSelector","filteredContacts","toLowerCase","includes","length","map","FilterWrapper","FilterLabel","FilterInput","filterSlice","createSlice","initialState","reducers","setFilter","_","action","payload","reducer","dispatch","useDispatch","placeholder","value","onChange","e","target","Filter"],"sourceRoot":""}